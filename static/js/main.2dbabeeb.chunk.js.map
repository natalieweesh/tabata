{"version":3,"sources":["gifs/testgif4.gif","gifs/testgif5.gif","gifs/testgif6.gif","gifs/testgif7.gif","gifs/testgif8.gif","gifs/testgif9.gif","gifs/testgif1.gif","gifs/testgif2.gif","gifs/testgif3.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","exercises","arms","title","img","gif1","gif2","gif3","legs","gif4","gif5","gif6","butt","gif7","gif8","gif9","chest","back","formatTime","seconds","mins","Math","floor","secs","App","timer","useRef","useState","currentRound","setCurrentRound","resting","setResting","paused","setPaused","finished","setFinished","theTime","setTheTime","exerciseIndex","setExerciseIndex","currentExercise","setCurrentExercise","startedWorkout","setStartedWorkout","workTime","setWorkTime","restTime","setRestTime","totalTime","setTotalTime","selectedMuscleGroups","setSelectedMuscleGroups","currentIntervalCount","setCurrentIntervalCount","rounds","setRounds","useEffect","clearTimeout","current","length","currentMuscleGroup","random","setTimeout","newIndex","newMuscleGroup","className","onChange","e","parseInt","target","value","htmlFor","includes","filter","x","concat","checked","id","type","src","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2dbabeeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/testgif4.8b4f1038.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif5.0b73b4aa.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif6.aaf7d5b7.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif7.dea16772.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif8.e693fdd1.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif9.aa7aceaf.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif1.ca4879c7.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif2.a0494a25.gif\";","module.exports = __webpack_public_path__ + \"static/media/testgif3.aee39b9e.gif\";","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport gif1 from './gifs/testgif1.gif';\nimport gif2 from './gifs/testgif2.gif';\nimport gif3 from './gifs/testgif3.gif';\nimport gif4 from './gifs/testgif4.gif';\nimport gif5 from './gifs/testgif5.gif';\nimport gif6 from './gifs/testgif6.gif';\nimport gif7 from './gifs/testgif7.gif';\nimport gif8 from './gifs/testgif8.gif';\nimport gif9 from './gifs/testgif9.gif';\n\nconst exercises = {\n  arms: [\n    {\n      title: 'bicep curl',\n      img: gif1\n    },\n    {\n      title: 'tricep dip',\n      img: gif2\n    },\n    {\n      title: 'hammer curl',\n      img: gif3\n    }\n  ],\n  legs: [\n    {\n      title: 'squat',\n      img: gif4\n    },\n    {\n      title: 'bulgarian split squat',\n      img: gif5\n    },\n    {\n      title: 'reverse lunge',\n      img: gif6\n    }\n  ],\n  butt: [\n    {\n      title: 'bridge',\n      img: gif7\n    },\n    {\n      title: 'deadlift',\n      img: gif8\n    },\n    {\n      title: 'sumo squat',\n      img: gif9\n    },\n  ],\n  chest: [\n    {\n      title: 'chest fly',\n      img: gif4\n    },\n    {\n      title: 'chest press',\n      img: gif5\n    },\n    {\n      title: 'reverse fly',\n      img: gif6\n    }\n  ],\n  back: [\n    {\n      title: 'upright row',\n      img: gif7\n    },\n    {\n      title: 'superman',\n      img: gif8\n    },\n    {\n      title: 'pull up',\n      img: gif9\n    }\n  ]\n}\n\nconst formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`\n}\n\nfunction App() {\n  // const muscleGroups = ['arms', 'legs', 'butt']\n  // const workTime = 5;\n  // const restTime = 3;\n  // const totalTime = 38; //testing with 60 seconds\n  const timer = useRef(null);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [resting, setResting] = useState(true);\n  const [paused, setPaused] = useState(true);\n  const [finished, setFinished] = useState(false);\n  const [theTime, setTheTime] = useState(0);\n  const [exerciseIndex, setExerciseIndex] = useState(0);\n  const [currentExercise, setCurrentExercise] = useState(null);\n  const [startedWorkout, setStartedWorkout] = useState(false);\n  const [workTime, setWorkTime] = useState(5)\n  const [restTime, setRestTime] = useState(3)\n  const [totalTime, setTotalTime] = useState(38)\n  const [selectedMuscleGroups, setSelectedMuscleGroups] = useState(['arms', 'legs', 'butt'])\n  const [currentIntervalCount, setCurrentIntervalCount] = useState(3);\n  // const rounds = Math.floor(totalTime / (workTime + restTime))\n  const [rounds, setRounds] = useState(null);\n\n  useEffect(() => {\n    if (paused || finished) {\n      clearTimeout(timer.current);\n      if (finished) {\n        setCurrentExercise(null)\n      }\n      return;\n    }\n    if (!selectedMuscleGroups || selectedMuscleGroups.length === 0) {\n      setSelectedMuscleGroups(['arms', 'legs', 'chest', 'butt', 'back']) // if they selected no muscle groups use them all\n      return;\n    }\n    if (!rounds) {\n      setRounds(Math.floor(totalTime / (workTime + restTime)))\n    }\n    if (!currentExercise) { // starting the first exercise of the workout\n      const currentMuscleGroup = selectedMuscleGroups[exerciseIndex];\n      setCurrentExercise(exercises[currentMuscleGroup][Math.floor(Math.random() * selectedMuscleGroups[exerciseIndex].length)])\n      setCurrentIntervalCount(restTime);\n    }\n    timer.current = setTimeout(() => {\n      setTheTime(theTime + 1)\n      if (currentRound * (workTime + restTime) + restTime === theTime + 1) { // start work (after rest is done)\n        setResting(false)\n        setCurrentIntervalCount(workTime)\n      } else if (theTime+1 === (rounds) * (workTime + restTime)) { // finished with whole workout\n        setFinished(true);\n        return;\n      } else if ((currentRound + 1) * (workTime + restTime) === theTime) { // start next round, start new exercise\n        setResting(true)\n        setCurrentRound(currentRound + 1)\n        const newIndex = ((exerciseIndex + 1) % (selectedMuscleGroups.length))\n        setExerciseIndex(newIndex)\n        const newMuscleGroup = selectedMuscleGroups[newIndex]\n        setCurrentExercise(exercises[newMuscleGroup][Math.floor(Math.random() * selectedMuscleGroups[newIndex].length)])\n        setCurrentIntervalCount(restTime)\n      } else {\n        setCurrentIntervalCount(currentIntervalCount - 1)\n      }\n    }, 1000)\n  }, [finished, paused, theTime, currentRound, rounds, currentExercise, exerciseIndex, selectedMuscleGroups, restTime, totalTime, workTime, currentIntervalCount])\n  return (\n    <div className=\"App\">\n      {!startedWorkout && <p className=\"exerciseTitle\">It's workout time!</p>}\n      {!startedWorkout &&\n      <div className=\"settingsRow\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <label>Choose your work time:</label>\n            <select className=\"select-css\" onChange={e => {\n              setWorkTime(parseInt(e.target.value))\n            }}>\n              <option value=\"5\">5 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"45\">45 seconds</option>\n              <option value=\"50\">50 seoncds</option>\n              <option value=\"60\">60 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your rest time:</label>\n            <select className=\"select-css\" onChange={e => setRestTime(parseInt(e.target.value))}>\n              <option value=\"3\">3 seconds</option>\n              <option value=\"10\">10 seconds</option>\n              <option value=\"15\">15 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"25\">25 seconds</option>\n              <option value=\"30\">30 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your total workout duration:</label>\n            <select className=\"select-css\" onChange={e => setTotalTime(parseInt(e.target.value))}>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"60\">1 minute</option>\n              <option value=\"300\">5 minutes</option>\n              <option value=\"600\">10 minutes</option>\n              <option value=\"900\">15 minutes</option>\n              <option value=\"1200\">20 minutes</option>\n              <option value=\"1500\">25 minutes</option>\n              <option value=\"1800\">30 minutes</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"row muscleRow\">\n          <label>Select the muscle groups to focus on:</label>\n          <div className=\"checkboxWrapper\">\n            <label className=\"checkboxLabel\" htmlFor=\"arms\">Arms</label><input onChange={() => {\n              if (selectedMuscleGroups.includes('arms')) {\n                setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== 'arms'))\n              } else {\n                setSelectedMuscleGroups(selectedMuscleGroups.concat(['arms']))\n              }\n            }} checked={selectedMuscleGroups.includes('arms')} id=\"arms\" value=\"arms\" type=\"checkbox\"/><div className=\"fakeCheckbox\">Arms</div>\n          </div>\n          <div className=\"checkboxWrapper\">\n            <label className=\"checkboxLabel\" htmlFor=\"legs\">Legs</label><input onChange={() => {\n              if (selectedMuscleGroups.includes('legs')) {\n                setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== 'legs'))\n              } else {\n                setSelectedMuscleGroups(selectedMuscleGroups.concat(['legs']))\n              }\n            }} checked={selectedMuscleGroups.includes('legs')} id=\"legs\" value=\"legs\" type=\"checkbox\"/><div className=\"fakeCheckbox\">Legs</div>\n          </div>\n          <div className=\"checkboxWrapper\">\n            <label className=\"checkboxLabel\" htmlFor=\"chest\">Chest</label><input onChange={() => {\n              if (selectedMuscleGroups.includes('chest')) {\n                setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== 'chest'))\n              } else {\n                setSelectedMuscleGroups(selectedMuscleGroups.concat(['chest']))\n              }\n            }} checked={selectedMuscleGroups.includes('chest')} id=\"chest\" value=\"chest\" type=\"checkbox\"/><div className=\"fakeCheckbox\">Chest</div>\n          </div>\n          <div className=\"checkboxWrapper\">\n            <label className=\"checkboxLabel\" htmlFor=\"butt\">Butt</label><input onChange={() => {\n              if (selectedMuscleGroups.includes('butt')) {\n                setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== 'butt'))\n              } else {\n                setSelectedMuscleGroups(selectedMuscleGroups.concat(['butt']))\n              }\n            }} checked={selectedMuscleGroups.includes('butt')} id=\"butt\" value=\"butt\" type=\"checkbox\"/><div className=\"fakeCheckbox\">Butt</div>\n          </div>\n          <div className=\"checkboxWrapper\">\n            <label className=\"checkboxLabel\" htmlFor=\"back\">Back</label><input onChange={() => {\n              if (selectedMuscleGroups.includes('back')) {\n                setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== 'back'))\n              } else {\n                setSelectedMuscleGroups(selectedMuscleGroups.concat(['back']))\n              }\n            }} checked={selectedMuscleGroups.includes('back')} id=\"back\" value=\"back\" type=\"checkbox\"/><div className=\"fakeCheckbox\">Back</div>\n          </div>\n        </div>\n      </div>\n      }\n\n\n      {currentExercise && (\n        <div className=\"row mainRow\">\n          <div className=\"column\">\n            <p className=\"exerciseTitle\">{currentExercise && currentExercise['title']}</p>\n            <img src={currentExercise && currentExercise['img']} alt=\"hello\" />\n            <p>[work your {selectedMuscleGroups[exerciseIndex]}]</p>\n          </div>\n          <div className=\"column\">\n            <p className={resting ? 'restText' : 'workText'}>{resting ? \"REST\" : \"WORK\"}</p>\n            <p className=\"countdown\">{currentIntervalCount}</p>\n          </div>\n          <div className=\"column\">\n            <p>Time elapsed: {formatTime(theTime)}</p>\n          </div>\n        </div>\n      )}\n\n      {finished && <div>\n        <p>YOU FINISHED!</p>\n        <p>Total workout time: {formatTime(theTime)}</p>\n        <p>Total rounds finished: {currentRound + 1}</p>\n      </div>}\n\n      {!finished &&\n      <div className=\"row\">\n        <button onClick={() => {\n          setPaused(!paused)\n          if (!startedWorkout) {\n            setStartedWorkout(true);\n          }\n        }} className={startedWorkout && !paused ? 'unpausedButton' : ''}>{!startedWorkout ? (\"START\") : (paused ? \"UNPAUSE\" : \"PAUSE\")}</button>\n      </div>\n      }\n\n      {/* <p>rounds: {rounds}</p>\n      <p>current round: {currentRound + 1}</p>\n      <p>paused: {paused ? \"true\" : \"false\"}</p>\n      <p>resting: {resting ? \"resting\" : \"working\"}</p>\n      <p>finished? {finished ? \"finished!\" : \"not yet\"}</p>\n      <p>exercise index: {exerciseIndex}</p> */}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}