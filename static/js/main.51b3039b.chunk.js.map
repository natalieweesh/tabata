{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["exercises","arms","title","img","character","legs","unilateral","butt","chest","back","core","formatTime","seconds","mins","Math","floor","secs","scrollDown","window","scroll","scrollY","speak","words","timeout","setTimeout","responsiveVoice","randomPhrase","work","workPhrases","restPhrases","phrases","random","length","App","timer","useRef","currentIntervalCount","currentRound","resting","useState","paused","setPaused","finished","setFinished","theTime","setTheTime","exerciseIndex","currentExercise","startedWorkout","setStartedWorkout","workTime","setWorkTime","restTime","setRestTime","totalTime","setTotalTime","selectedMuscleGroups","setSelectedMuscleGroups","rounds","showPreview","setShowPreview","arrays","Object","keys","map","muscleGroup","template","i","push","selector","exerciseRandomizer","useEffect","clearTimeout","current","currentMuscleGroup","randomi","idx","slice","concat","newIndex","newMuscleGroup","console","log","className","onChange","e","parseInt","target","value","muscle","key","htmlFor","includes","filter","x","checked","id","type","toUpperCase","style","width","src","alt","onClick","exercise","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51b3039b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst exercises = {\n  arms: [\n    {\n      title: 'bicep curl',\n      img: 'https://media.giphy.com/media/UV4Yi70OhwQ6JwJo7m/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'skull crusher',\n      img: 'https://media.giphy.com/media/MdjZSDee0C50ZuYlHa/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'curl + press',\n      img: 'https://media.giphy.com/media/Lq1ERaOKq2LEuK7xd1/giphy.gif',\n      character: 'spongebob'\n    },\n    {\n      title: 'hammer curl',\n      img: 'https://media.giphy.com/media/izaYkYoJMnY07WYFzj/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'pike pushup',\n      img: 'https://media.giphy.com/media/eLYEh1IRtaP7oApdCo/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'tricep dip',\n      img: 'https://media.giphy.com/media/W3emLNQKTecUA1POxp/giphy.gif',\n      character: 'spongebob'\n    },\n    {\n      title: 'tricep pushup',\n      img: 'https://media.giphy.com/media/KehD7SA2RF4gqHQP8r/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'shoulder press',\n      img: 'https://media.giphy.com/media/SUtRTnS36VFpC12IrT/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'tricep kickback',\n      img: 'https://media.giphy.com/media/fvfoHSsvAeUVrrNc33/giphy.gif',\n      character: 'meeseeks'\n    }\n  ],\n  legs: [\n    {\n      title: 'jumping jack',\n      img: 'https://media.giphy.com/media/lNWbCKbffqCIzY8RR1/giphy.gif',\n      character: 'poopybutthole'\n    },\n    {\n      title: 'calf raise',\n      img: 'https://media.giphy.com/media/QyhLeRDWoIusTLMyNk/giphy.gif',\n      character: 'bmo'\n    },\n    {\n      title: 'squat',\n      img: 'https://media.giphy.com/media/XEZsDl0zybBbwJQV07/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'reverse lunge',\n      img: 'https://media.giphy.com/media/QWR3SDoEL6ggzL9rub/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'jumprope',\n      img: 'https://media.giphy.com/media/Y1jNTxApOQRfKOJt8k/giphy.gif',\n      character: 'bmo'\n    },\n    {\n      title: 'bulgarian split squat',\n      img: 'https://media.giphy.com/media/YqhMwl3nSuA2Dr3i5v/giphy.gif',\n      unilateral: true,\n      character: 'tina'\n    },\n    {\n      title: 'squat jump',\n      img: 'https://media.giphy.com/media/dWsKZW6A3PdJnKROMl/giphy.gif',\n      character: 'meeseeks'\n    }\n  ],\n  butt: [\n    {\n      title: 'squat to leg raise',\n      img: 'https://media.giphy.com/media/SwNf4vey9bnBLRypko/giphy.gif',\n      character: 'bmo'\n    },\n    {\n      title: 'glute kick back',\n      img: 'https://media.giphy.com/media/JPy2RNHCXbbLGw59pV/giphy.gif',\n      unilateral: true,\n      character: 'tina'\n    },\n    {\n      title: 'glute bridge',\n      img: 'https://media.giphy.com/media/cKKAg0wrGRYENJiUei/giphy.gif',\n      character: 'poopybutthole'\n    },\n    {\n      title: 'deadlift',\n      img: 'https://media.giphy.com/media/Yqz7ZokQ0kCs8uaN9E/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'fire hydrant',\n      img: 'https://media.giphy.com/media/YMY5NMCtfOBJXGAtXY/giphy.gif',\n      unilateral: true,\n      character: 'tina'\n    },\n    {\n      title: 'sumo squat',\n      img: 'https://media.giphy.com/media/emGfboB1RYoSodN7XG/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'glute bridge walk out',\n      img: 'https://media.giphy.com/media/cir6FkDe7MXgmffNcd/giphy.gif',\n      character: 'tina'\n    }\n  ],\n  chest: [\n    {\n      title: 'chest fly',\n      img: 'https://media.giphy.com/media/LOXDvvmMvnk33n12pC/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'pullover',\n      img: 'https://media.giphy.com/media/Lo03vYJTNH6ouIRr4V/giphy.gif',\n      character: 'bmo'\n    },\n    {\n      title: 'chest press',\n      img: 'https://media.giphy.com/media/d8FZU70Rkj1LGIImBB/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'reverse fly',\n      img: 'https://media.giphy.com/media/kfvD2clhN8AaM7P4L5/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'wide grip pushup',\n      img: 'https://media.giphy.com/media/iFt57qzEXZisX6JcZ7/giphy.gif',\n      character: 'tina'\n    }\n  ],\n  back: [\n    {\n      title: 'superman',\n      img: 'https://media.giphy.com/media/lTArkNAXA1Dk9b4PsX/giphy.gif',\n      character: 'poopybutthole'\n    },\n    {\n      title: 'upright row',\n      img: 'https://media.giphy.com/media/h7tvdrSjSzmB3XUPgH/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'i-t-y',\n      img: 'https://media.giphy.com/media/Wp0gT1ibDsmUU5KmHm/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'row to tricep kickback',\n      img: 'https://media.giphy.com/media/fqbSg8AqQ09t09RYsY/giphy.gif',\n      unilateral: true,\n      character: 'bmo'\n    },\n    {\n      title: 'row',\n      img: 'https://media.giphy.com/media/cmg3rpWI915jERDeYY/giphy.gif',\n      character: 'tina'\n    }\n  ],\n  core: [\n    {\n      title: 'bicycle crunch',\n      img: 'https://media.giphy.com/media/cKmbHxWIQrs5x4k6ur/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'plank jack',\n      img: 'https://media.giphy.com/media/kegbiTdPMMqUzWb4ub/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'standing side crunch',\n      img: 'https://media.giphy.com/media/Q8a7nGMti3uuCFHfF5/giphy.gif',\n      unilateral: true,\n      character: 'tina'\n    },\n    {\n      title: 'side plank',\n      img: 'https://media.giphy.com/media/jq0G0EmNEGYyfhENhA/giphy.gif',\n      unilateral: true,\n      character: 'bmo'\n    },\n    {\n      title: 'bear plank',\n      img: 'https://media.giphy.com/media/dscqPpbt6z16WJSvkc/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'mountain climber',\n      img: 'https://media.giphy.com/media/W35qtGrrpweU00eLwI/giphy.gif',\n      character: 'meeseeks'\n    },\n    {\n      title: 'sit up',\n      img: 'https://media.giphy.com/media/TiCqf0dCsS0UiSLWqd/giphy.gif',\n      character: 'tina'\n    },\n    {\n      title: 'plank',\n      img: 'https://media.giphy.com/media/J2rGWkLU7IS5D2Us7f/giphy.gif',\n      character: 'bmo'\n    },\n    {\n      title: 'crunch',\n      img: 'https://media.giphy.com/media/J5dtNyZYvFIFFC1fUV/giphy.gif',\n      character: 'tina'\n    }\n  ]\n}\n\nconst formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`\n}\n\nconst scrollDown = () => {\n  window.scroll(0, window.scrollY + 300);\n}\n\nconst speak = (words, timeout = 0) => {\n  setTimeout(() => {\n    window.responsiveVoice.speak(words)\n  }, timeout)\n}\n\nconst randomPhrase = (work = false) => {\n  const workPhrases = ['time to work', 'get to it', 'go go go', \"let's get it done\", 'begin', \"ok go\", 'go for it'];\n  const restPhrases = ['take a break', 'and rest', 'break time', 'take a breather', 'and stop', 'and break'];\n  const phrases = work ? workPhrases : restPhrases;\n  return phrases[Math.floor(Math.random() * phrases.length)]\n}\n\nfunction App() {\n  const timer = useRef(null);\n  const currentIntervalCount = useRef(3);\n  const currentRound = useRef(0);\n  const resting = useRef(true);\n  const [paused, setPaused] = useState(true);\n  const [finished, setFinished] = useState(false);\n  const [theTime, setTheTime] = useState(0);\n  const exerciseIndex = useRef(0);\n  const currentExercise = useRef(null);\n  const [startedWorkout, setStartedWorkout] = useState(false);\n  const [workTime, setWorkTime] = useState(20)\n  const [restTime, setRestTime] = useState(10)\n  const [totalTime, setTotalTime] = useState(1200)\n  const [selectedMuscleGroups, setSelectedMuscleGroups] = useState(['arms', 'legs', 'butt', 'back'])\n  const rounds = useRef(null)\n  const [showPreview, setShowPreview] = useState(false);\n  const arrays = {}\n  Object.keys(exercises).map((muscleGroup) => {\n    let template = []\n    for (let i = 0; i < exercises[muscleGroup].length; i++) {\n      template.push(i);\n    }\n    arrays[muscleGroup] = {\n      template: template,\n      selector: template\n    }\n  })\n\n  let exerciseRandomizer = useRef(arrays);\n\n  useEffect(() => {\n    if (paused || finished) {\n      clearTimeout(timer.current);\n      if (finished) {\n        currentExercise.current = null;\n      }\n      return;\n    }\n    if (!selectedMuscleGroups || selectedMuscleGroups.length === 0) {\n      setSelectedMuscleGroups(['arms', 'legs', 'chest', 'butt', 'back', 'core']) // if they selected no muscle groups use them all\n      return;\n    }\n    if (!rounds.current) {\n      rounds.current = Math.floor(totalTime / (workTime + restTime))\n    }\n    if (!currentExercise.current) { // starting the first exercise of the workout\n      const currentMuscleGroup = selectedMuscleGroups[exerciseIndex.current];\n      if (exerciseRandomizer.current[currentMuscleGroup]['selector'].length === 0) {\n        exerciseRandomizer.current[currentMuscleGroup]['selector'] = exerciseRandomizer.current[currentMuscleGroup]['template']\n      }\n      if (exerciseRandomizer.current[currentMuscleGroup]['selector'].length > 0) {\n        let randomi = Math.floor(Math.random() * exerciseRandomizer.current[currentMuscleGroup]['selector'].length)\n        let idx = exerciseRandomizer.current[currentMuscleGroup]['selector'][randomi]\n        currentExercise.current = exercises[currentMuscleGroup][idx]\n        exerciseRandomizer.current[currentMuscleGroup]['selector'] = exerciseRandomizer.current[currentMuscleGroup]['selector'].slice(0, randomi).concat(exerciseRandomizer.current[currentMuscleGroup]['selector'].slice(randomi+1))\n      }\n      currentIntervalCount.current = restTime;\n      speak(`let's do this! first exercise is ${currentExercise.current['title']}`)\n    }\n    timer.current = setTimeout(() => {\n      setTheTime(theTime + 1)\n      if (currentRound.current * (workTime + restTime) + restTime === theTime + 1) { // start work (after rest is done)\n        resting.current = false;\n        currentIntervalCount.current = workTime\n        speak(randomPhrase(true), 1000)\n      } else if (theTime + 1 === (rounds.current) * (workTime + restTime)) { // finished with whole workout\n        setFinished(true);\n        speak(\"good job! workout complete! it's peanut butter jelly time\")\n        return;\n      } else if ((currentRound.current + 1) * (workTime + restTime) === theTime + 1) { // start next round, start new exercise\n        resting.current = true;\n        currentRound.current = currentRound.current + 1\n        const newIndex = ((exerciseIndex.current + 1) % (selectedMuscleGroups.length))\n        exerciseIndex.current = newIndex;\n        const newMuscleGroup = selectedMuscleGroups[newIndex]\n        console.log(exerciseRandomizer.current[newMuscleGroup]['selector'])\n        if (exerciseRandomizer.current[newMuscleGroup]['selector'].length === 0) {\n          exerciseRandomizer.current[newMuscleGroup]['selector'] = exerciseRandomizer.current[newMuscleGroup]['template']\n        }\n        if (exerciseRandomizer.current[newMuscleGroup]['selector'].length > 0) {\n          let randomi = Math.floor(Math.random() * exerciseRandomizer.current[newMuscleGroup]['selector'].length)\n          let idx = exerciseRandomizer.current[newMuscleGroup]['selector'][randomi]\n          currentExercise.current = exercises[newMuscleGroup][idx]\n          exerciseRandomizer.current[newMuscleGroup]['selector'] = exerciseRandomizer.current[newMuscleGroup]['selector'].slice(0, randomi).concat(exerciseRandomizer.current[newMuscleGroup]['selector'].slice(randomi+1))\n        }\n        currentIntervalCount.current = restTime\n        speak(`${randomPhrase()}. ${currentExercise.current['title']} is next`, 1000)\n      } else {\n        if (currentIntervalCount.current - 1 >= 0) {\n          currentIntervalCount.current = currentIntervalCount.current - 1\n        }\n      }\n    }, 1000)\n  }, [paused, restTime, totalTime, workTime, theTime, finished, selectedMuscleGroups])\n  return (\n    <div className=\"App\">\n      {!startedWorkout && <p className=\"exerciseTitle\">It's tabata time!</p>}\n      {!startedWorkout &&\n      <div className=\"settingsRow\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <label>Choose your work time:</label>\n            <select className=\"select-css\" onChange={e => {\n              setWorkTime(parseInt(e.target.value))\n            }} value={workTime}>\n              <option value=\"5\">5 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"45\">45 seconds</option>\n              <option value=\"50\">50 seoncds</option>\n              <option value=\"60\">60 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your rest time:</label>\n            <select className=\"select-css\" onChange={e => setRestTime(parseInt(e.target.value))} value={restTime}>\n              <option value=\"3\">3 seconds</option>\n              <option value=\"10\">10 seconds</option>\n              <option value=\"15\">15 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"25\">25 seconds</option>\n              <option value=\"30\">30 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your total workout duration:</label>\n            <select className=\"select-css\" onChange={e => setTotalTime(parseInt(e.target.value))} value={totalTime}>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"60\">1 minute</option>\n              <option value=\"300\">5 minutes</option>\n              <option value=\"600\">10 minutes</option>\n              <option value=\"900\">15 minutes</option>\n              <option value=\"1200\">20 minutes</option>\n              <option value=\"1500\">25 minutes</option>\n              <option value=\"1800\">30 minutes</option>\n            </select>\n          </div>\n        </div>\n        <div>\n          <div className=\"row muscleRowTitle\">\n            <label>Select the muscle groups to focus on:</label>\n          </div>\n          <div className=\"row muscleRow\">\n              {Object.keys(exercises).map(muscle => {\n                return <div className=\"checkboxWrapper\" key={muscle}>\n                  <label className=\"checkboxLabel\" htmlFor={muscle}>{muscle}</label><input onChange={() => {\n                    if (selectedMuscleGroups.includes(muscle)) {\n                      setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== muscle))\n                    } else {\n                      setSelectedMuscleGroups(selectedMuscleGroups.concat([muscle]))\n                    }\n                  }} checked={selectedMuscleGroups.includes(muscle)} id={muscle} value={muscle} type=\"checkbox\"/><div className=\"fakeCheckbox\">{muscle.toUpperCase()}</div>\n                </div>\n              })}\n          </div>\n        </div>\n      </div>\n      }\n\n      {currentExercise.current && !finished && (\n        <div>\n          <div className=\"row progressRow\">\n            <div className=\"progressBar\"><div className=\"fill\" style={{width: `${parseInt(theTime / ((restTime + workTime) * rounds.current) * 100)}%`}}></div></div>\n          </div>\n          <div className={resting.current ? 'restText row mainRow' : 'workText row mainRow'}>\n            <div className=\"column\">\n              <p className=\"exerciseTitle\">{currentExercise.current && currentExercise.current['title']}</p>\n              <img src={currentExercise.current && currentExercise.current['img']} alt={currentExercise.current && currentExercise.current['title']} />\n              <p>[work your {selectedMuscleGroups[exerciseIndex.current]}]</p>\n            </div>\n            <div className=\"column\">\n              <div className='centerize'>\n                <p className='countdownTitle'>{resting.current ? \"REST\" : \"WORK\"}</p>\n                <p className=\"countdown\">{currentIntervalCount.current >= 0 ? currentIntervalCount.current : \"\"}</p>\n              </div>\n          </div>\n        </div>\n          <div className=\"row\">\n            <div className=\"column\">\n              <p>Time elapsed: {formatTime(theTime)}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {!currentExercise.current && startedWorkout && <div><div className=\"row progressRow\">\n            <div className=\"progressBar\"><div className=\"fill\" style={{width: `${parseInt(theTime / ((restTime + workTime) * rounds.current) * 100)}%`}}></div></div>\n          </div><div className=\"row restText mainRow\"><p className=\"exerciseTitle centerize\">Let's get ready to rumble...</p></div></div>}\n\n      {finished && <div>\n        <p className=\"exerciseTitle\">YOU FINISHED!</p>\n        <img src=\"https://media.giphy.com/media/ZY8BVlXHZqMal62QS3/giphy.gif\" alt=\"it's peanut butter jelly time\" />\n        <p>Total workout time: {formatTime(theTime)}</p>\n        <p>Total rounds finished: {currentRound.current + 1}</p>\n      </div>}\n\n      {!finished &&\n      <div className=\"row\">\n        <button onClick={() => {\n          setPaused(!paused)\n          if (!startedWorkout) {\n            setStartedWorkout(true);\n          }\n        }} className={startedWorkout && !paused ? 'unpausedButton' : ''}>{!startedWorkout ? (\"START\") : (paused ? \"UNPAUSE\" : \"PAUSE\")}</button>\n        {!startedWorkout && <button className=\"previewButton\" onClick={() => {\n          setShowPreview(!showPreview)\n          if (!showPreview) setTimeout(scrollDown, 200)\n        }}>{showPreview ? 'Hide the exercises' : 'Preview the exercises'}</button>}\n      </div>\n      }\n      \n      {showPreview && !startedWorkout &&\n        <div className=\"row\">\n          {Object.keys(exercises).map(muscle => {\n            return <div>\n              <p className=\"exerciseTitle\">exercises for your {muscle}:</p>\n              <div className=\"row previewRow\">\n              {exercises[muscle].map(exercise => {\n                return <div className=\"column\"><p>{exercise['title']}</p><img src={exercise['img']} alt={exercise['title']}/></div>\n              })}\n              </div>\n            </div>\n          })}\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}