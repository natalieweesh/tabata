{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["exercises","arms","title","img","legs","butt","chest","back","core","formatTime","seconds","mins","Math","floor","secs","scrollDown","window","scroll","scrollY","App","timer","useRef","useState","currentRound","setCurrentRound","resting","setResting","paused","setPaused","finished","setFinished","theTime","setTheTime","exerciseIndex","setExerciseIndex","currentExercise","setCurrentExercise","startedWorkout","setStartedWorkout","workTime","setWorkTime","restTime","setRestTime","totalTime","setTotalTime","selectedMuscleGroups","setSelectedMuscleGroups","currentIntervalCount","setCurrentIntervalCount","rounds","setRounds","showPreview","setShowPreview","useEffect","clearTimeout","current","length","currentMuscleGroup","random","setTimeout","newIndex","newMuscleGroup","className","onChange","e","parseInt","target","value","Object","keys","map","muscle","key","htmlFor","includes","filter","x","concat","checked","id","type","toUpperCase","style","width","src","alt","onClick","exercise","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ed7d912.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst exercises = {\n  arms: [\n    {\n      title: 'bicep curl',\n      img: 'https://media.giphy.com/media/UV4Yi70OhwQ6JwJo7m/giphy.gif'\n    },\n    {\n      title: 'hammer curl',\n      img: 'https://media.giphy.com/media/izaYkYoJMnY07WYFzj/giphy.gif'\n    },\n    {\n      title: 'skull crusher',\n      img: 'https://media.giphy.com/media/MdjZSDee0C50ZuYlHa/giphy.gif'\n    },\n    {\n      title: 'tricep pushup',\n      img: 'https://media.giphy.com/media/KehD7SA2RF4gqHQP8r/giphy.gif'\n    },\n    {\n      title: 'tricep kickback',\n      img: 'https://media.giphy.com/media/fvfoHSsvAeUVrrNc33/giphy.gif'\n    },\n    {\n      title: 'pike pushup',\n      img: 'https://media.giphy.com/media/eLYEh1IRtaP7oApdCo/giphy.gif'\n    },\n    {\n      title: 'shoulder press',\n      img: 'https://media.giphy.com/media/SUtRTnS36VFpC12IrT/giphy.gif'\n    },\n    {\n      title: 'curl + press',\n      img: 'https://media.giphy.com/media/Lq1ERaOKq2LEuK7xd1/giphy.gif'\n    },\n    {\n      title: 'tricep dip',\n      img: 'https://media.giphy.com/media/W3emLNQKTecUA1POxp/giphy.gif'\n    }\n  ],\n  legs: [\n    {\n      title: 'squat',\n      img: 'https://media.giphy.com/media/XEZsDl0zybBbwJQV07/giphy.gif'\n    },\n    {\n      title: 'bulgarian split squat',\n      img: 'https://media.giphy.com/media/YqhMwl3nSuA2Dr3i5v/giphy.gif'\n    },\n    {\n      title: 'reverse lunge',\n      img: 'https://media.giphy.com/media/QWR3SDoEL6ggzL9rub/giphy.gif'\n    },\n    {\n      title: 'squat jump',\n      img: 'https://media.giphy.com/media/dWsKZW6A3PdJnKROMl/giphy.gif'\n    },\n    {\n      title: 'jumping jack',\n      img: 'https://media.giphy.com/media/lNWbCKbffqCIzY8RR1/giphy.gif'\n    }\n  ],\n  butt: [\n    {\n      title: 'glute bridge',\n      img: 'https://media.giphy.com/media/cKKAg0wrGRYENJiUei/giphy.gif'\n    },\n    {\n      title: 'deadlift',\n      img: 'https://media.giphy.com/media/Yqz7ZokQ0kCs8uaN9E/giphy.gif'\n    },\n    {\n      title: 'sumo squat',\n      img: 'https://media.giphy.com/media/emGfboB1RYoSodN7XG/giphy.gif'\n    },\n    {\n      title: 'fire hydrant',\n      img: 'https://media.giphy.com/media/YMY5NMCtfOBJXGAtXY/giphy.gif'\n    },\n    {\n      title: 'glute kick back',\n      img: 'https://media.giphy.com/media/JPy2RNHCXbbLGw59pV/giphy.gif'\n    },\n    {\n      title: 'glute bridge walk out',\n      img: 'https://media.giphy.com/media/cir6FkDe7MXgmffNcd/giphy.gif'\n    }\n  ],\n  chest: [\n    {\n      title: 'chest fly',\n      img: 'https://media.giphy.com/media/LOXDvvmMvnk33n12pC/giphy.gif'\n    },\n    {\n      title: 'chest press',\n      img: 'https://media.giphy.com/media/d8FZU70Rkj1LGIImBB/giphy.gif'\n    },\n    {\n      title: 'reverse fly',\n      img: 'https://media.giphy.com/media/kfvD2clhN8AaM7P4L5/giphy.gif'\n    },\n    {\n      title: 'wide grip pushup',\n      img: 'https://media.giphy.com/media/iFt57qzEXZisX6JcZ7/giphy.gif'\n    }\n  ],\n  back: [\n    {\n      title: 'upright row',\n      img: 'https://media.giphy.com/media/h7tvdrSjSzmB3XUPgH/giphy.gif'\n    },\n    {\n      title: 'superman',\n      img: 'https://media.giphy.com/media/lTArkNAXA1Dk9b4PsX/giphy.gif'\n    },\n    {\n      title: 'i-t-y',\n      img: 'https://media.giphy.com/media/Wp0gT1ibDsmUU5KmHm/giphy.gif'\n    },\n    {\n      title: 'row',\n      img: 'https://media.giphy.com/media/cmg3rpWI915jERDeYY/giphy.gif'\n    }\n  ],\n  core: [\n    {\n      title: 'plank jack',\n      img: 'https://media.giphy.com/media/kegbiTdPMMqUzWb4ub/giphy.gif'\n    },\n    {\n      title: 'mountain climber',\n      img: 'https://media.giphy.com/media/W35qtGrrpweU00eLwI/giphy.gif'\n    },\n    {\n      title: 'bear plank',\n      img: 'https://media.giphy.com/media/dscqPpbt6z16WJSvkc/giphy.gif'\n    },\n    {\n      title: 'standing side crunch',\n      img: 'https://media.giphy.com/media/Q8a7nGMti3uuCFHfF5/giphy.gif'\n    }\n  ]\n}\n\nconst formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`\n}\n\nconst scrollDown = () => {\n  window.scroll(0, window.scrollY + 300);\n}\n\nfunction App() {\n  const timer = useRef(null);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [resting, setResting] = useState(true);\n  const [paused, setPaused] = useState(true);\n  const [finished, setFinished] = useState(false);\n  const [theTime, setTheTime] = useState(0);\n  const [exerciseIndex, setExerciseIndex] = useState(0);\n  const [currentExercise, setCurrentExercise] = useState(null);\n  const [startedWorkout, setStartedWorkout] = useState(false);\n  const [workTime, setWorkTime] = useState(20)\n  const [restTime, setRestTime] = useState(10)\n  const [totalTime, setTotalTime] = useState(1200)\n  const [selectedMuscleGroups, setSelectedMuscleGroups] = useState(['arms', 'legs', 'butt', 'back'])\n  const [currentIntervalCount, setCurrentIntervalCount] = useState(3);\n  const [rounds, setRounds] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n\n  useEffect(() => {\n    if (paused || finished) {\n      clearTimeout(timer.current);\n      if (finished) {\n        setCurrentExercise(null)\n      }\n      return;\n    }\n    if (!selectedMuscleGroups || selectedMuscleGroups.length === 0) {\n      setSelectedMuscleGroups(['arms', 'legs', 'chest', 'butt', 'back', 'core']) // if they selected no muscle groups use them all\n      return;\n    }\n    if (!rounds) {\n      setRounds(Math.floor(totalTime / (workTime + restTime)))\n    }\n    if (!currentExercise) { // starting the first exercise of the workout\n      const currentMuscleGroup = selectedMuscleGroups[exerciseIndex];\n      setCurrentExercise(exercises[currentMuscleGroup][Math.floor(Math.random() * selectedMuscleGroups[exerciseIndex].length)])\n      setCurrentIntervalCount(restTime);\n    }\n    timer.current = setTimeout(() => {\n      setTheTime(theTime + 1)\n      if (currentRound * (workTime + restTime) + restTime === theTime + 1) { // start work (after rest is done)\n        setResting(false)\n        setCurrentIntervalCount(workTime)\n      } else if (theTime+1 === (rounds) * (workTime + restTime)) { // finished with whole workout\n        setFinished(true);\n        return;\n      } else if ((currentRound + 1) * (workTime + restTime) === theTime+1) { // start next round, start new exercise\n        setResting(true)\n        setCurrentRound(currentRound + 1)\n        const newIndex = ((exerciseIndex + 1) % (selectedMuscleGroups.length))\n        setExerciseIndex(newIndex)\n        const newMuscleGroup = selectedMuscleGroups[newIndex]\n        setCurrentExercise(exercises[newMuscleGroup][Math.floor(Math.random() * selectedMuscleGroups[newIndex].length)])\n        setCurrentIntervalCount(restTime)\n      } else {\n        if (currentIntervalCount - 1 >= 0) {\n          setCurrentIntervalCount(currentIntervalCount - 1)\n        }\n      }\n    }, 1000)\n  }, [finished, paused, theTime, currentRound, rounds, currentExercise, exerciseIndex, selectedMuscleGroups, restTime, totalTime, workTime, currentIntervalCount])\n  return (\n    <div className=\"App\">\n      {!startedWorkout && <p className=\"exerciseTitle\">It's tabata time!</p>}\n      {!startedWorkout &&\n      <div className=\"settingsRow\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <label>Choose your work time:</label>\n            <select className=\"select-css\" onChange={e => {\n              setWorkTime(parseInt(e.target.value))\n            }} value={workTime}>\n              <option value=\"5\">5 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"45\">45 seconds</option>\n              <option value=\"50\">50 seoncds</option>\n              <option value=\"60\">60 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your rest time:</label>\n            <select className=\"select-css\" onChange={e => setRestTime(parseInt(e.target.value))} value={restTime}>\n              <option value=\"3\">3 seconds</option>\n              <option value=\"10\">10 seconds</option>\n              <option value=\"15\">15 seconds</option>\n              <option value=\"20\">20 seconds</option>\n              <option value=\"25\">25 seconds</option>\n              <option value=\"30\">30 seconds</option>\n            </select>\n          </div>\n          <div className=\"column\">\n            <label>Choose your total workout duration:</label>\n            <select className=\"select-css\" onChange={e => setTotalTime(parseInt(e.target.value))} value={totalTime}>\n              <option value=\"30\">30 seconds</option>\n              <option value=\"60\">1 minute</option>\n              <option value=\"300\">5 minutes</option>\n              <option value=\"600\">10 minutes</option>\n              <option value=\"900\">15 minutes</option>\n              <option value=\"1200\">20 minutes</option>\n              <option value=\"1500\">25 minutes</option>\n              <option value=\"1800\">30 minutes</option>\n            </select>\n          </div>\n        </div>\n        <div>\n          <div className=\"row muscleRowTitle\">\n            <label>Select the muscle groups to focus on:</label>\n          </div>\n          <div className=\"row muscleRow\">\n              {Object.keys(exercises).map(muscle => {\n                return <div className=\"checkboxWrapper\" key={muscle}>\n                  <label className=\"checkboxLabel\" htmlFor={muscle}>{muscle}</label><input onChange={() => {\n                    if (selectedMuscleGroups.includes(muscle)) {\n                      setSelectedMuscleGroups(selectedMuscleGroups.filter(x => x !== muscle))\n                    } else {\n                      setSelectedMuscleGroups(selectedMuscleGroups.concat([muscle]))\n                    }\n                  }} checked={selectedMuscleGroups.includes(muscle)} id={muscle} value={muscle} type=\"checkbox\"/><div className=\"fakeCheckbox\">{muscle.toUpperCase()}</div>\n                </div>\n              })}\n          </div>\n        </div>\n      </div>\n      }\n\n      {currentExercise && (\n        <div>\n          <div className=\"row progressRow\">\n            <div className=\"progressBar\"><div className=\"fill\" style={{width: `${parseInt(theTime / ((restTime + workTime) * rounds) * 100)}%`}}></div></div>\n          </div>\n          <div className=\"row mainRow\">\n            <div className=\"column\">\n              <p className=\"exerciseTitle\">{currentExercise && currentExercise['title']}</p>\n              <img src={currentExercise && currentExercise['img']} alt={currentExercise && currentExercise['title']} />\n              <p>[work your {selectedMuscleGroups[exerciseIndex]}]</p>\n            </div>\n            <div className=\"column\">\n              <div className={resting ? 'restText centerize' : 'workText centerize'}>\n                <p className='countdownTitle'>{resting ? \"REST\" : \"WORK\"}</p>\n                <p className=\"countdown\">{currentIntervalCount >= 0 ? currentIntervalCount : \"\"}</p>\n              </div>\n          </div>\n        </div>\n          <div className=\"row\">\n            <div className=\"column\">\n              <p>Time elapsed: {formatTime(theTime)}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {finished && <div>\n        <p className=\"exerciseTitle\">YOU FINISHED!</p>\n        <img src=\"https://media.giphy.com/media/ZY8BVlXHZqMal62QS3/giphy.gif\" alt=\"it's peanut butter jelly time\" />\n        <p>Total workout time: {formatTime(theTime)}</p>\n        <p>Total rounds finished: {currentRound + 1}</p>\n      </div>}\n\n      {!finished &&\n      <div className=\"row\">\n        <button onClick={() => {\n          setPaused(!paused)\n          if (!startedWorkout) {\n            setStartedWorkout(true);\n          }\n        }} className={startedWorkout && !paused ? 'unpausedButton' : ''}>{!startedWorkout ? (\"START\") : (paused ? \"UNPAUSE\" : \"PAUSE\")}</button>\n        {!startedWorkout && <button className=\"previewButton\" onClick={() => {\n          setShowPreview(!showPreview)\n          if (!showPreview) setTimeout(scrollDown, 200)\n        }}>{showPreview ? 'Hide the exercises' : 'Preview the exercises'}</button>}\n      </div>\n      }\n      \n      {showPreview && !startedWorkout &&\n        <div className=\"row\">\n          {Object.keys(exercises).map(muscle => {\n            return <div>\n              <p className=\"exerciseTitle\">exercises for your {muscle}:</p>\n              <div className=\"row previewRow\">\n              {exercises[muscle].map(exercise => {\n                return <div className=\"column\"><p>{exercise['title']}</p><img src={exercise['img']} alt={exercise['title']}/></div>\n              })}\n              </div>\n            </div>\n          })}\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}